#include <stdio.h>

struct Item {
    int weight;
    int value;
};


int compareItems(const void *a, const void *b) {
    struct Item *itemA = (struct Item *)a;
    struct Item *itemB = (struct Item *)b;
    double valuePerWeightA = (double)itemA->value / itemA->weight;
    double valuePerWeightB = (double)itemB->value / itemB->weight;

  
    if (valuePerWeightA > valuePerWeightB)
        return -1;
    else if (valuePerWeightA < valuePerWeightB)
        return 1;
    else
        return 0;
}


double knapsackGreedy(struct Item items[], int n, int capacity) {
    qsort(items, n, sizeof(struct Item), compareItems);

    double totalValue = 0.0;
    int currentWeight = 0,i;
    
    for ( i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
         
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            
            int remainingCapacity = capacity - currentWeight;
            double fraction = (double)remainingCapacity / items[i].weight;
            currentWeight += remainingCapacity;
            totalValue += items[i].value * fraction;
            break;
        }
    }

    return totalValue;
}

int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    struct Item items[n];

    printf("Enter weight and value of each item:\n");
    int i;
    for ( i = 0; i < n; i++) {
        scanf("%d%d", &items[i].weight, &items[i].value);
    }

    double maxValue = knapsackGreedy(items, n, capacity);

    printf("The maximum value that can be obtained from the knapsack is: %lf\n", maxValue);

    return 0;
}
